<div class="m-3 pt-4 mx-5">
  <h4 class="text-center text-gray-dark">Add a new Feature <i class="fa fa-plus-circle"></i></h4>
  <div class="field form-group text-dark my-3">
    <label for="detail_title">Title</label>
    <input type="text" name="detail[title]" id="detail_title<%= submit_id %>" class="form-control" />
  </div>
  <div class="field form-group text-dark my-3">
    <label for="detail_description">Description</label>
    <textarea name="detail[description]" id="detail_description<%= submit_id %>" class="form-control"></textarea>
  </div>
  <input type="hidden" name="detail[flagType]" value="<%= type %>" id="detail_flagType<%= submit_id %>" />
  <div class="field form-group col-m-6 text-dark">
    <label for="detail_file">File</label>
    <input type="file" name="detail[file][]" id="detail_file<%= submit_id %>" class="form-control " multiple />
  </div>
  <input type="hidden" name="detail[project_id]" id="detail_project_id<%= submit_id %>" value="<%= params[:id] %>" />
  <div id="taskContainer">
  </div>
  <div class="actions py-3">
    <button name="commit" value="Create Detail" id="<%= submit_id %>" class="btn btn-primary mt-3">Submit</button>
    <button class="btn btn-secondary mt-3 mx-3" id="modalCloseButton<%= submit_id %>" type="button">Close</button>
  </div>
</div>
<script>
  // Add an event listener to the close button
  var closeButton = document.getElementById("modalCloseButton<%= submit_id %>");
  closeButton.addEventListener("click", function() {
    // Find the collapse element and hide it
    var collapseElement = document.getElementById("collapseOne<%= submit_id %>");
    collapseElement.classList.remove("show");
  });

  document.getElementById('<%= submit_id %>').addEventListener('click', function(event) {
   event.preventDefault();

   var title = document.getElementById('detail_title<%= submit_id %>').value;
   var description = document.getElementById('detail_description<%= submit_id %>').value;
   var flagType = document.getElementById('detail_flagType<%= submit_id %>').value;
   var fileInput = document.getElementById('detail_file<%= submit_id %>');
   var project_id = document.getElementById('detail_project_id<%= submit_id %>').value;


   var formData = new FormData();
   formData.append('detail[title]', title);
   formData.append('detail[description]', description);
   formData.append('detail[flagType]', flagType);
   formData.append('detail[project_id]', project_id);

   for (var i = 0; i < fileInput.files.length; i++) {
     formData.append('detail[file][]', fileInput.files[i]);
   }

   console.log(formData);

   $.ajax({
     url: `/projects/<%= params[:id] %>/details/`,
     method: 'POST',
     accept: 'application/json',
     data: formData,
     processData: false,
     contentType: false,
     beforeSend: function(xhr) {
       xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
     },
     success: function(response) {
        console.log("success");

        console.log(response);

        // clear input fields
        document.getElementById('detail_title<%= submit_id %>').value = '';
        document.getElementById('detail_description<%= submit_id %>').value = '';
        document.getElementById('detail_flagType<%= submit_id %>').value = 'backFlag';
        document.getElementById('detail_file<%= submit_id %>').value = '';

       // closing the modal
        var collapseElement = document.getElementById("collapseOne<%= submit_id %>");
        collapseElement.classList.remove("show");

        // now add the new detail to the DOM

        let uuid = response.uuid;
        let id = response.id;
        let status = response.status;
        let project_id = response.project_id;

        // get files from formData
        let files = formData.getAll('detail[file][]');
        var container = document.getElementById('<%= submit_id %>-details-list');
        var newDetail = document.createElement('div');
        newDetail.innerHTML = `
        <div type="button" class="mt-2" data-toggle="collapse" data-target="#collapseExample${id}" aria-expanded="false" aria-controls="collapseExample${id}">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">${title}</h4>
              <p class="card-text">${description}</p>
            </div>
          </div>
        </div>
        <div class="collapse mb-3" id="collapseExample${id}">
          <div class="card card-body">
            <div class="text-dark text-uppercase fw-bold my-3" style="font-size: 12px;">
              Feature Id : ${uuid}
            </div>
            <div class="text-dark text-uppercase fw-bold my-3" style="font-size: 12px;">
              Title : ${title}</div>
            <div class="text-dark text-uppercase fw-bold my-3" style="font-size: 12px;">
              Description : ${description}</div>
            <form action="/change_status/${id}" method="post" data-remote="true" id="change-status-form">
              <div class="flash-container${id}"></div>
              <div class="my-3">
                <%= hidden_field_tag :project_id, params[:id]%>
                <%= label_tag :status, "Status:", class: "text-dark text-uppercase fw-bold", style: "font-size: 12px;" %>
                <%= select_tag :status, options_for_select(["Started", "Finished", "Delivered"], selected: @status), class: "form-select" %>
              </div>
              <%= submit_tag "Save", class: "message-btn" %>
            </form>
              <div class="text-dark text-uppercase fw-bold mt-5" style="font-size: 12px;">
              Tasks:
            </div>
            <div class="text-dark text-uppercase fw-bold mt-5" style="font-size: 12px;" id="taskCount${id}">
              Tasks: (${0}/ ${0}) </div>
            <div id="taskContainer${id}">
            <% if @tasks %>
              <% @tasks.each do |task| %>
                <div class="field form-group text-dark my-3">
                  <div class="form-check mx-4">
                    <input type="checkbox" name="detail[task_ids][]" value="<%= task.id %>" <%= task.status != "Added" ? "checked" : "" %> class="form-check-input task-checkbox${id}" data-project_id="<%= params[:id] %>" data-detail_id="${id}" data-task_id="<%= task.id %>" id="detail_task_ids_<%= task.id %>">
                    <label class="form-check-label"><%= task.name %></label>
                  </div>
                </div>
              <% end %>
            <% end %>
            </div>
            <div class="field form-group d-flex justify-content-around text-dark my-3">
              <div class="flash-task-container${id}"></div>
              <div>
                <label for="task_name">Task Name</label>
                <input type="text" name="task_name" class="form-control" id="task_name${id}" style="cursor: pointer">
              </div>
              <button type="button" class="message-btn mx-0 task-button" id="addTaskButton${id}">Add Task</button>
            </div>
            <div class="d-flex flex-column flex-wrap">
              <div class="text-dark text-uppercase fw-bold mt-5 mb-3" style="font-size: 12px;">
                Users Assigned to this:
              </div>
              <div class="d-flex flex-column  flex-wrap">
                <div id="user-container${id}">
                <% if @users %>
                  <% @users.each do |user| %>
                    <p><%= user.email %></p>
                  <% end %>
                <% end %>
                </div>
                <form action="/projects/${project_id}/details/${id}/update_user_ids" method="post" data-remote="true">
                  <input type="text"  name="email[]" id="search-input${id}" class="form-control" placeholder="Type to search..." />
                  <input type="hidden" name="authenticity_token" value="{{form_authenticity_token}}">
                  <div id="search-results${id}"></div>
                  <%= submit_tag 'Add User', class: 'message-btn mt-3' %>
                </form>
              </div>
            </div>
            <div class="d-flex flex-column flex-wrap">
                <div class="text-dark text-uppercase fw-bold my-3" style="font-size: 12px;">
                  Files :
                </div>
                <div class="d-flex flex-wrap flex-column">
                  ${files.map(file => `<div class="text-dark text-uppercase mx-3 fw-bold my-3" style="font-size: 12px;">
                  ${file.type.includes('image') ? `<img src="${URL.createObjectURL(file)}" width=100 height=100 alt="${file.name}" />` : ''}
                  ${file.type.includes('application/pdf') ? `<a href="${URL.createObjectURL(file)}" target="_blank">View PDF</a>` : ''}
                  ${file.type.includes('application/vnd.ms-excel') || file.type.includes('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') || file.type.includes('text/plain') || file.type.includes('text/markdown') ? `<a href="${URL.createObjectURL(file)}" download="${file.name}">Download</a>` : ''}
                  ${file.type.includes('application/zip') || file.type.includes('application/x-rar-compressed') ? `<a href="${URL.createObjectURL(file)}" download="${file.name}">Download</a>` : ''}
                  </div>`).join('')}
              </div>
            </div>
            <div class="d-flex flex-column flex-wrap">
              <div class="text-dark text-uppercase fw-bold my-3" style="font-size: 12px;">
                Comment Box :
              </div>
              <div class="d-flex flex-column  flex-wrap">
                <div id="chat-container${id}">
                </div>
                <form id="chat-form-${id}" data-backlog-id="${id}" method="POST" action="/chats" data-remote="true" class="bootstrap-class">
                  <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
                  <div class="form-group d-flex flex-row">
                    <label for="chat_message_${id}" class="mt-3 mx-2">Message</label>
                    <div class="position-relative">
                      <textarea class="form-control" name="chat[message]" id="chat_message_${id}"></textarea>
                      <div id="search-results-chat${id}" class="search-results"
                      >
                  </div>
                  <input type="hidden" name="chat[sender_id]" id="chat_sender_${id}" value="<%= current_user.id %>">
                  <input type="hidden" name="chat[detail_id]" value="${id}" id="chat_details_${id}">
                  <div class="text-center">
                    <button type="submit" class="message-btn my-3">Post Comment</button>
                  </div>
                </form>
              </div>
            </div>
        </div>
      </div>`;

        container.appendChild(newDetail);
        var chatInputId = "#chat_message_" + id;
        var chatInput = document.querySelector(chatInputId);

        var searchResultsContainerIdchat = "search-results-chat" + id;
        var searchResultsContainerchat = document.getElementById(searchResultsContainerIdchat);
        console.log(searchResultsContainerIdchat);

        var isTextSearchable = false;

        // Event listener for the chat input field
        chatInput.addEventListener('input', function() {
          var inputValue = chatInput.value;
          // to get the most recent @ mention
          var lastAtSymbolIndex = inputValue.lastIndexOf('@');
          if (lastAtSymbolIndex !== -1) {
            var searchText = inputValue.substring(lastAtSymbolIndex + 1);
            showUserDropdown(searchText);
          } else {
            searchResultsContainerchat.innerHTML = '';
          }
        });

        chatInput.addEventListener('keypress', function(event) {
          if (event.key === " ") {
            console.log("special key pressed");
          }
        });

        // Event listener for the search results container
        var searchResultsContainerClass = ".search-results-chat" + id;
        searchResultsContainerchat.addEventListener('click', function(event) {
          var selectedItem = event.target;
          var selectedValue = selectedItem.textContent;

          // Insert the selected value at the current cursor position in the chat input
          insertValueAtCursor(chatInput, selectedValue);

          // Clear the search results container
          searchResultsContainerchat.innerHTML = '';
        });

        // Function to show the dropdown with all users
        function showUserDropdown(value) {

          value = value.replace("@", "");
          console.log(value);

          // Get the authenticity token from the meta tag
          var authenticityToken = $('meta[name="csrf-token"]').attr('content');

          // Send an Ajax request to the search endpoint
          $.ajax({
            url: `/search/${id}`,
            method: 'POST',
            data: { query: value },
            headers: {
              'X-CSRF-Token': authenticityToken // Include the authenticity token in the request headers
            },
            dataType: 'json',
            success: function(response) {

                searchResultsContainerchat.innerHTML = '';
                var resultItems = [];

                // Loop through the search results and add them to the container
                response.forEach(function(result) {
                  var resultItem = document.createElement('div');
                  resultItem.className = "search-results-chat" + id;
                  resultItem.className ="search-results-text";
                  resultItem.textContent = result.username; // Update with your data structure
                  searchResultsContainerchat.appendChild(resultItem);
                  console.log(searchResultsContainerchat);
                });

              // Show the search results container
            searchResultsContainerchat.style.display = 'block';
            }
          });
        }

        function insertValueAtCursor(inputElement, value) {
        var inputValue = inputElement.value;
        var atIndex = inputValue.lastIndexOf('@');
        if (atIndex !== -1) {
          var prefix = inputValue.substring(0, atIndex + 1);
          inputElement.value = prefix + value;
        } else {
          inputElement.value = value;
        }
        }


        // search the users to assign them
        let searchInputId = "search-input" + id;

        var searchInput = document.getElementById(searchInputId);

        let searchResultsContainerId = "search-results" + id;
        var searchResultsContainer = document.getElementById(searchResultsContainerId);

        searchInput.addEventListener('input', function() {
        var searchCurrentInput = document.getElementById(searchInputId);
        var searchCurrentResultsContainer = document.getElementById(searchResultsContainerId);
        var query = searchCurrentInput.value.trim();

        // Clear previous search results
        searchCurrentResultsContainer.innerHTML = '';

        // Perform search and update results
        if (query !== '') {
        // Get the authenticity token from the meta tag
        var authenticityToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        // Send an Ajax request to the search endpoint
        $.ajax({
          url:  `/search/${id}`,
          method: 'POST',
          data: { query: query },
          headers: {
            'X-CSRF-Token': authenticityToken // Include the authenticity token in the request headers
          },
          dataType: 'json',
          success: function(response) {
            // Loop through the search results and add them to the container
            response.forEach(function(result) {
              var resultItem = document.createElement('div');
              // add class to the result item
              resultItem.classList.add('search-result-value');
              resultItem.textContent = result.email; // Update with your data structure
              searchCurrentResultsContainer.appendChild(resultItem);
            });
          }
        });
        }
        // Event listener for the search results container
        searchCurrentResultsContainer.addEventListener('click', function(event) {
            var selectedItem = event.target;
            var selectedValue = selectedItem.textContent;

            // Set the selected value in the input field
            searchCurrentInput.value = selectedValue;

            // Clear the below div by setting its innerHTML to an empty string
            var belowDiv = document.getElementById(searchResultsContainerId);
            belowDiv.innerHTML = '';
        });
      });


        // Task related

        // Function factory to create checkbox click event listener with encapsulated item.id
        function createCheckboxClickListener(itemId) {
          return function(event) {
            var projectId = <%= params[:id] %>;
            var detailId = id;
            var taskId = event.target.dataset.taskId || event.target.value;

            // Determine if the checkbox is checked or unchecked
            var completed = event.target.checked ? "Done" : "Added";

            // Send PATCH request to update the task status
            $.ajax({
              url: `/projects/${projectId}/details/${detailId}/tasks/${taskId}`,
              type: "PATCH",
              dataType: "json",
              contentType: "application/json",
              data: JSON.stringify({ task: { status: completed } }),
              headers: { "X-CSRF-Token": "<%= form_authenticity_token %>" },
              success: function(response) {
                console.log(response.message);
                showNotification(`Task ${taskId} Updated Successfully`);

                // Update the task count
                var completedTasksCount = response.completedTasksCount;
                var totalTasksCount = response.totalTasksCount;

                var taskCountId = "taskCount" + detailId
                var taskCountElement = document.getElementById(taskCountId);
                taskCountElement.innerText = `Tasks: (${completedTasksCount} / ${totalTasksCount})`;
              },
              error: function(xhr, status, error) {
                console.error("Error: " + error);
              }
            });
          };
        }

        // Function to add a new task
        function addTask(itemId) {
          console.log(itemId);
          var taskName = document.getElementById("task_name" + itemId).value.trim();

          if (taskName === "") {
            console.log("Task name cannot be empty.");
            return;
          }

          var projectId = <%= params[:id] %>;
          var detailId = itemId;

          $.ajax({
            url: `/projects/${projectId}/details/${detailId}/tasks`,
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            data: JSON.stringify({ task: { name: taskName } }),
            headers: { "X-CSRF-Token": "<%= form_authenticity_token %>" },
            success: function(response) {
              console.log(response.message);
              showNotification("Task Added Successfully");
              console.log("Task ID:", response.id);

              // Update the task count
                var completedTasksCount = response.completedTasksCount;
                var totalTasksCount = response.totalTasksCount + 1;

                var taskCountId = "taskCount" + detailId
                var taskCountElement = document.getElementById(taskCountId);
                taskCountElement.innerText = `Tasks: (${completedTasksCount} / ${totalTasksCount})`;

              var taskId = response.id;

              var taskContainer = document.getElementById("taskContainer" + itemId);
              var newTaskElement = document.createElement("div");
              newTaskElement.innerHTML = `
                <div class="field form-group text-dark my-3">
                  <div class="form-check mx-4">
                    <input type="checkbox" name="detail[task_ids][]" value="${taskId}" class="form-check-input task-checkbox${taskId}" data-project_id="<%= params[:id] %>" data-detail_id="${itemId}" data-task_id="${taskId}" id="detail_task_ids_${taskId}">
                    <label class="form-check-label">${taskName}</label>
                  </div>
                </div>`;

              taskContainer.appendChild(newTaskElement);
              document.getElementById("task_name" + itemId).value = "";

              // Add event listener to the newly created checkbox
              var checkboxId = "detail_task_ids_" + taskId;
              var checkbox = document.getElementById(checkboxId);
              checkbox.addEventListener("click", createCheckboxClickListener(itemId));
            },
            error: function(xhr, status, error) {
              console.error("Error: " + error);
            }
          });
        }

        // Event listeners
        var addTaskButtonId = "addTaskButton" + id;
        document.getElementById(addTaskButtonId).addEventListener("click", function() {
          addTask(id);
        });

        var taskNameId = "task_name" + id;
        document.getElementById(taskNameId).addEventListener("keydown", function(event) {
          if (event.key === "Enter") {
            addTask(id);
            event.preventDefault();
          }
        });

        document.addEventListener("click", function(event) {
          console.log(id);
          var taskCheckBoxId = "task_checkbox" + id;
          if (event.target.classList.contains(taskCheckBoxId)) {
            createCheckboxClickListener(id)(event);
          }
        });

        // show notification
        function showNotification(text) {
        const notification = document.createElement('div');
        notification.classList.add('notification');
        notification.innerText = text;

        document.body.appendChild(notification);

        // Show the notification for a few seconds
        setTimeout(function() {
          notification.classList.add('show');
          setTimeout(function() {
            closeNotification(notification);
          }, 3000);
        }, 100);
        }

        function closeNotification(notification) {
        notification.classList.remove('show');
        setTimeout(function() {
          document.body.removeChild(notification);
        }, 300);
        }
     },
     error: function(xhr, status, error) {
        console.log(error);
        // Handle the error as needed
     }
   });
  });
</script>
